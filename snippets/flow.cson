'.source.cpp':
	'Maximum flow':
		'prefix': 'maxflow'
		'body': """
			template<class T = int>
			struct max_flow {
				struct edge {
					int next, v;
					T cap, flow;
				};

				int s, t;
				vector<int> start, level, used, q;
				vector<edge> g;

				max_flow(int n, int s, int t) : s(s), t(t), start(n, -1), level(n, -1), used(n, -1), q(n) {}

				void add_edge(int u, int v, T cap, T rev = T()) {
					g.push_back({start[u], v, cap, T()});
					start[u] = g.size() - 1;
					g.push_back({start[v], u, rev, T()});
					start[v] = g.size() - 1;
				}

				bool bfs(int s, int t) {
					size_t qs = 0, qe = 1;
					fill(level.begin(), level.end(), -1);
					q[0] = s;
					level[s] = 0;
					while (qs != qe) {
						int x = q[qs++];
						for (int i = start[x]; i != -1; i = g[i].next) {
							if (g[i].flow < g[i].cap && level[g[i].v] == -1) {
								level[g[i].v] = level[x] + 1;
								q[qe++] = g[i].v;
							}
						}
					}
					return level[t] != -1;
				}

				T dfs(int x, int t, T f) {
					if (x == t)
						return f;
					for (int& i = used[x]; i != -1; i = g[i].next) {
						int v = g[i].v;
						if (level[v] == level[x] + 1 && g[i].flow < g[i].cap) {
							T z = dfs(v, t, min(f, g[i].cap - g[i].flow));
							if (z > 0) {
								g[i].flow += z;
								g[i^1].flow -= z;
								return z;
							}
						}
					}
					return T();
				}

				T operator() () {
					T f = T();
					while (bfs(s, t)) {
						used = start;
						while (1) {
							T z = dfs(s, t, numeric_limits<T>::max());
							f += z;
							if (!z) break;
						}
					}
					return f;
				}
			};
		"""

  'Minimum cost maximum flow':
    'prefix': 'mincostflow'
    'body': """
      template<class T = int>
      struct min_cost_max_flow {
        static constexpr T inf = numeric_limits<T>::max();

      	struct edge {
      		int v, t;
      		T c, w, f;
      	};

      	vector<vector<edge>> g;
      	int n, s, t;
      	T f, w;

      	min_cost_max_flow(int n, int s, int t) : g(n), n(n), s(s), t(t), f(T()), w(T()) {}

      	void add_edge(int u, int v, T c, T w, T f = T()) {
      		edge e1 = {v, (int)g[v].size(), c, w, f};
      		edge e2 = {u, (int)g[u].size(), 0, -w, -f};
      		g[u].push_back(e1);
      		g[v].push_back(e2);
      	}

      	void step(T h = inf) {
      		string l(n, 0);
      		vector<T> d(n, inf);
      		vector<int> p(n), q(n), pe(n);
      		int qs = 0, qe = 0;
      		q[qe++] = s;
      		d[s] = T();
      		while (qs != qe) {
      			int u = q[qs++];
      			if (qs == n) qs = 0;
      			l[u] = 2;
      			for (size_t i=0; i<g[u].size(); i++) {
      				edge& e = g[u][i];
      				int v = e.v;
      				if (e.f < e.c && d[u] + e.w < d[v]) {
      					d[v] = d[u] + e.w;
      					if (l[v] == 0) {
      						q[qe++] = v;
      						if (qe == n) qe = 0;
      					} else if (l[v] == 2) {
      						if (--qs == -1) {
      							qs = n-1;
      						}
      						q[qs] = v;
      					}
      					l[v] = 1;
      					p[v] = u;
      					pe[v] = i;
      				}
      			}
      		}
      		if (d[t] == inf) return;
      		T a = h;
      		int y = t;
      		while (y != s) {
      			int x = p[y];
      			int i = pe[y];
      			a = min(a, g[x][i].c - g[x][i].f);
      			y = x;
      		}
      		y = t;
      		while (y != s) {
      			int x = p[y];
      			int i = pe[y];
      			int j = g[x][i].t;
      			g[x][i].f += a;
      			g[y][j].f -= a;
      			w += g[x][i].w * a;
      			y = x;
      		}
      		f += a;
      	}

      	void operator()(T l = inf) {
      		while (1) {
      			T o = f;
      			step(l - f);
      			if (o == f) return;
      		}
      	}
      };
    """
