'.source.cpp':
	'Extended Euclidean Algorithm':
		'prefix': 'eea'
		'body': """
			template<class T>
			T eea(T a, T b, T& x, T& y) {
				if (!b) {
					x = 1;
					y = 0;
					return a;
				}

				T x1, y1;
				T g = eea(b, a % b, x1, y1);
				x = y1;
				y = x1 - (a / b) * y1;
				return g;
			}
		"""

	'Chinese Remainder Theorem':
		'prefix': 'crt'
		'body': """
			struct crt {
				ll i1, i2, mm, mod1, mod2;

				// mod1 * mod2 < 2^62
				crt(ll mod1, ll mod2) {
					this->mod1 = mod1;
					this->mod2 = mod2;
					eea(mod1, mod2, i1, i2);
					mm = mod1 * mod2;
					i1 = (i1 % mm + mm) % mm;
					i2 = (i2 % mm + mm) % mm;
				}

				ll operator() (ll x, ll y) const {
					x = (__int128_t)x * i2 % mm;
					y = (__int128_t)y * i1 % mm;
					ll t = (__int128_t)x * mod2 % mm + (__int128_t)y * mod1 % mm;
					return t >= mm ? t - mm : t;
				}
			};
		"""

	'Sieve of Eratosthenes':
		'prefix': 'sieve'
		'body': """
			struct sieve {
				const int maxn;
				vector<int> f, primes;

				sieve(int maxn) : maxn(maxn), f(maxn) {
					for (int i=2; i<maxn; i++) {
						if (f[i] == 0) {
							f[i] = i;
							primes.push_back(i);
						}

						for (int p : primes) {
							if (p > f[i] || i * p >= maxn) {
								break;
							}

							f[i*p] = p;
						}
					}
				}

			 	auto factor_small(int x) const {
					vector<pair<int, int>> v;
					while (x > 1) {
						int p = f[x], c = 0;
						while (x % p == 0) {
							x /= p;
							c++;
						}
						v.emplace_back(p, c);
					}
					return v;
				}

				template<class T>
				auto factor(T x) const {
					vector<pair<T, int>> v;
					for (int p : primes) {
						if ((ll)p*p > x) {
							break;
						}

						if (x % p == 0) {
							int c = 0;
							while (x % p == 0) {
								x /= p;
								c++;
							}
							v.emplace_back(p, c);
						}
					}

					if (x > 1) {
						v.emplace_back(x, 1);
					}

					return v;
				}
			};
		"""

	'Modular arithmetic':
		'prefix': 'mint'
		'body': """
			template<int m>
			struct modint {
				unsigned x;

				modint() : x(0) {}
				modint(long long arg) : x((arg %= m) < 0 ? arg + m : arg) {}

				modint operator+ (const modint& b) const {
					auto t = *this; t.x = (t.x += b.x) >= m ? t.x-m : t.x; return t;
				}

				modint operator- (const modint& b) const {
					auto t = *this; t.x = (t.x += m-b.x) >= m ? t.x-m : t.x; return t;
				}

				modint operator* (const modint& b) const {
					auto t = *this; t.x = ll(t.x) * b.x % m; return t;
				}

				template<class T> modint operator^ (T n) const {
					modint t;
					if (n == 0) return t.x = 1, t;
					if (n == 1) return t.x = x, t;
					t = *this ^ (n >> 1); t *= t;
					return n & 1 ? *this * t : t;
				}

				modint& operator+= (const modint& b) { return *this = *this + b; }
				modint& operator-= (const modint& b) { return *this = *this - b; }
				modint& operator*= (const modint& b) { return *this = *this * b; }
				modint& operator++ () { if (++x == m) x = 0; return *this; }
				modint& operator-- () { if (x-- == 0) x = m-1; return *this; }
				modint operator++ (int) { modint tmp = *this; ++*this; return tmp; }
				modint operator-- (int) { modint tmp = *this; --*this; return tmp; }
				bool operator== (const modint& other) const { return x == other.x; }
				bool operator!= (const modint& other) const {	return x != other.x; }
				int operator() () const { return x; }
				template<class T> modint operator^= (T n) { return *this = *this ^ n; }
				modint inv() const { return *this ^ (m-2); }
			};

			const int mod = 1'000'000'007;
			typedef modint<mod> mint;
		"""
