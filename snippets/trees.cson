'.source.cpp':
	'Implicit segment tree':
		'prefix': 'implicitsegtree'
		'body': """
			template<class W, class T = int, class F = plus<T>>
			struct implicit_segtree {
				struct node { T v; int l; int r; };
				typedef typename make_unsigned<W>::type Wu;
				static inline W midpoint(W l, W r) { return l + (W)((Wu(r)-l) >> 1); }
				static inline bool is_leaf(W l, W r) { return Wu(r)-l == 1; }
				node dn() { return {e, ~0, ~0}; }
				int nn() { a.emplace_back(dn()); return a.size() - 1; }

				T e;
				F f;
				W rl, rr;
				vector<node> a;

				implicit_segtree(W rl, W rr, T e = T(), F f = F()) :
					e(e), f(f), rl(rl), rr(rr), a(1, dn()) {}

				template<class L>
				int _au(W p, const T& v, int x, W xl, W xr, L op) {
					if (!~x) x = nn();
					if (is_leaf(xl, xr)) {
						op(a[x].v, v);
					} else {
						W xm = midpoint(xl, xr);
						if (p < xm) {
							a[x].l = _au(p, v, a[x].l, xl, xm, op);
						} else {
							a[x].r = _au(p, v, a[x].r, xm, xr, op);
						}
						a[x].v = f(~a[x].l ? a[a[x].l].v : e, ~a[x].r ? a[a[x].r].v : e);
					}
					return x;
				}

				void add(W p, const T& v) {
					_au(p, v, 0, rl, rr, [&](T& x, const T& y) { x = f(x, y); });
				}

				void update(W p, const T& v) {
					_au(p, v, 0, rl, rr, [&](T& x, const T& y) { x = y; });
				}

				T get(W l, W r, int x, W xl, W xr) {
					if (!~x || r <= xl || xr <= l)
						return e;
					if (l <= xl && xr <= r)
						return a[x].v;
					W xm = midpoint(xl, xr);
					return f(get(l, r, a[x].l, xl, xm), get(l, r, a[x].r, xm, xr));
				}

				T operator() (W l, W r) { return get(l, r, 0, rl, rr); }
			};
		"""

	'Implicit segment tree with lazy updates':
		'prefix': 'implicitsegtreelazy'
		'body': """
			template<class T, class U, class F, class G, class H, class W>
			struct implicit_segtreelazy {
				struct node { T v; U u; int l; int r; };
				typedef typename make_unsigned<W>::type Wu;
				static inline W midpoint(W l, W r) { return l + (W)((Wu(r)-l) >> 1); }
				static inline bool is_leaf(W l, W r) { return Wu(r)-l == 1; }
				node dn() { return {e, eu, ~0, ~0}; }
				int nn() { a.emplace_back(dn()); return a.size() - 1; }

				T e; U eu;
				F f; G g; H h;
				W rl, rr;
				vector<node> a;

				// Add two elements
				// Add two updaters
				// Add an element and an update
				// index range
				// Neutral element
				// Neutral update
				implicit_segtreelazy(F f, G g, H h, W rl, W rr, T e = T(), U eu = U()) :
					e(e), eu(eu), f(f), g(g), h(h), rl(rl), rr(rr), a(1, dn()) {}

				void push(int x, bool leaf) {
					a[x].v = h(a[x].v, a[x].u);
					if (!leaf) {
						if (!~a[x].l) a[x].l = nn();
						if (!~a[x].r) a[x].r = nn();
						a[a[x].l].u = g(a[a[x].l].u, a[x].u);
						a[a[x].r].u = g(a[a[x].r].u, a[x].u);
					}
					a[x].u = eu;
				}

				int update(W l, W r, const U& u, int x, W xl, W xr) {
					if (r <= xl || xr <= l)
						return push(x, is_leaf(xl, xr)), x;
					if (l <= xl && xr <= r)
						return a[x].u = g(a[x].u, u), push(x, is_leaf(xl, xr)), x;
					push(x, is_leaf(xl, xr));
					W xm = midpoint(xl, xr);
					a[x].l = update(l, r, u, a[x].l, xl, xm);
					a[x].r = update(l, r, u, a[x].r, xm, xr);
					a[x].v = f(a[a[x].l].v, a[a[x].r].v);
					return x;
				}

				T get(W l, W r, int x, W xl, W xr) {
					if (r <= xl || xr <= l)
						return e;
					push(x, is_leaf(xl, xr));
					if (l <= xl && xr <= r)
						return a[x].v;
					W xm = midpoint(xl, xr);
					return f(get(l, r, a[x].l, xl, xm), get(l, r, a[x].r, xm, xr));
				}

				void update(W l, W r, const U& u) { update(l, r, u, 0, rl, rr); }
				T operator() (W l, W r) { return get(l, r, 0, rl, rr); }
			};
		"""

	'Link-cut tree (commutative)':
		'prefix': 'linkcutcommutative'
		'body': """
			template<class T = int, class F = plus<T>>
			struct link_cut_commutative {
				// Credits: https://codeforces.com/blog/entry/75885
				// 1-based

				struct node {
					T v, s;
					int c[2] = {0, 0}, p = 0, q = 0;
					bool f = false;
				};

				vector<node> a;
				F f;

				link_cut_commutative(int n, T e = T(), F f = F(), T v = T()) : a(n+1), f(f) {
					for (int i=1; i<=n; i++) {
						a[i].v = a[i].s = v;
					}
					a[0].v = a[0].s = e;
				}

				int dir(int x, int y) { return a[x].c[1] == y; }

				void sch(int x, int d, int y) {
					if (x) a[x].c[d] = y, pull(x);
					if (y) a[y].p = x;
				}

				void pull(int x) {
					if (!x) return;
					a[x].s = f(a[a[x].c[0]].s, f(a[x].v, a[a[x].c[1]].s));
				}

				void push(int x) {
					if (!x || !a[x].f) return;
					int& l = a[x].c[0];
					int& r = a[x].c[1];
					a[l].f ^= 1;
					a[r].f ^= 1;
					swap(l, r);
					a[x].f = 0;
				}

				void rotate(int x, int d) {
					int y = a[x].p, z = a[y].p, w = a[x].c[d];
					swap(a[x].q, a[y].q);
					sch(y, !d, w);
					sch(x, d, y);
					sch(z, dir(z, y), x);
				}

				void splay(int x) {
					for (push(x); a[x].p;) {
						int y = a[x].p, z = a[y].p;
						push(z);
						push(y);
						push(x);
						int dx = dir(y, x), dy = dir(z, y);
						if (!z) {
							rotate(x, !dx);
						} else if (dx == dy) {
							rotate(y, !dx);
							rotate(x, !dx);
						} else {
							rotate(x, dy);
							rotate(x, dx);
						}
					}
				}

				void make_root(int u) {
					access(u);
					int l = a[u].c[0];
					a[l].f ^= 1;
					swap(a[l].p, a[l].q);
					sch(u, 0, 0);
				}

				void access(int w) {
					for (int v=0, u=w; u; u=a[v=u].q) {
						splay(u);
						splay(v);
						int r = a[u].c[1];
						a[v].q = 0;
						swap(a[r].p, a[r].q);
						sch(u, 1, v);
					}
					splay(w);
				}

				void link(int u, int v) {
					make_root(v);
					a[v].q = u;
				}

				void cut(int u, int v) {
					make_root(u);
					access(u);
					splay(v);
					a[v].q = 0;
				}

				bool connected(int u, int v) {
					if (u == v) return true;
					make_root(u);
					access(v);
					splay(u);
					return a[v].p == u || a[a[v].p].p == u;
				}

				void update(int x, const T& v) {
					make_root(x);
					access(x);
					a[x].v = a[x].s = v;
				}

				T operator()(int u, int v) {
					make_root(u);
					access(v);
					return a[v].s;
				}
			};
		"""

	'Link-cut tree (non-commutative)':
		'prefix': 'linkcutnoncommutative'
		'body': """
			template<class T = string, class F = plus<T>>
			struct link_cut_noncommutative {
				// Credits: https://codeforces.com/blog/entry/75885
				// 1-based

				struct node {
					T v, s, r;
					int c[2] = {0, 0}, p = 0, q = 0;
					bool f = false;
				};

				vector<node> a;
				F f;

				link_cut_noncommutative(int n, T e = T(), F f = F(), T v = T()) : a(n+1), f(f) {
					for (int i=1; i<=n; i++) {
						a[i].v = a[i].s = a[i].r = v;
					}
					a[0].v = a[0].s = a[0].r = e;
				}

				int dir(int x, int y) { return a[x].c[1] == y; }

				void sch(int x, int d, int y) {
					if (x) a[x].c[d] = y, pull(x);
					if (y) a[y].p = x;
				}

				const T& rdval(int x, int d) {
					return (a[x].f ^ d) ? a[x].r : a[x].s;
				}

				void pull(int x) {
					if (!x) return;
					a[x].s = f(rdval(a[x].c[0], 0), f(a[x].v, rdval(a[x].c[1], 0)));
					a[x].r = f(rdval(a[x].c[1], 1), f(a[x].v, rdval(a[x].c[0], 1)));
				}

				void push(int x) {
					if (!x || !a[x].f) return;
					swap(a[x].s, a[x].r);
					int& l = a[x].c[0];
					int& r = a[x].c[1];
					a[l].f ^= 1;
					a[r].f ^= 1;
					swap(l, r);
					a[x].f = 0;
				}

				void rotate(int x, int d) {
					int y = a[x].p, z = a[y].p, w = a[x].c[d];
					swap(a[x].q, a[y].q);
					sch(y, !d, w);
					sch(x, d, y);
					sch(z, dir(z, y), x);
				}

				void splay(int x) {
					for (push(x); a[x].p;) {
						int y = a[x].p, z = a[y].p;
						push(z);
						push(y);
						push(x);
						int dx = dir(y, x), dy = dir(z, y);
						if (!z) {
							rotate(x, !dx);
						} else if (dx == dy) {
							rotate(y, !dx);
							rotate(x, !dx);
						} else {
							rotate(x, dy);
							rotate(x, dx);
						}
					}
				}

				void make_root(int u) {
					access(u);
					int l = a[u].c[0];
					a[l].f ^= 1;
					swap(a[l].p, a[l].q);
					sch(u, 0, 0);
				}

				void access(int w) {
					for (int v=0, u=w; u; u=a[v=u].q) {
						splay(u);
						splay(v);
						int r = a[u].c[1];
						a[v].q = 0;
						swap(a[r].p, a[r].q);
						sch(u, 1, v);
					}
					splay(w);
				}

				void link(int u, int v) {
					make_root(v);
					a[v].q = u;
				}

				void cut(int u, int v) {
					make_root(u);
					access(u);
					splay(v);
					a[v].q = 0;
				}

				bool connected(int u, int v) {
					if (u == v) return true;
					make_root(u);
					access(v);
					splay(u);
					return a[v].p == u || a[a[v].p].p == u;
				}

				void update(int x, const T& v) {
					make_root(x);
					access(x);
					a[x].v = a[x].s = v;
				}

				T operator()(int u, int v) {
					make_root(u);
					access(v);
					return a[v].f ? a[v].r : a[v].s;
				}
			};
		"""
