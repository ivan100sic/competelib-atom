'.source.cpp':
	'Fenwick tree':
		'prefix': 'fenwick'
		'body': """
			template<class T = int, class F = plus<T>>
			struct fenwick {
				vector<T> a;
				T e;
				F f;

				fenwick(int n, T e = T(), F f = F()) : a(n, e), e(e), f(f) {}

				void add(int p, const T& v) {
					for (p++; p <= (int)a.size(); p += p & -p)
						a[p-1] = f(a[p-1], v);
				}

				T operator() (int p) const {
					T v = e;
					for (; p; p -= p & p)
						v = f(v, a[p-1]);
					return v;
				}
			};
		"""

	'Segment tree':
		'prefix': 'segtree'
		'body': """
			template<class T = int, class F = plus<T>>
			struct segtree {
				int maxn;
				vector<T> a;
				T e;
				F f;

				segtree(int n, T e = T(), F f = F(), T v = T()) : e(e), f(f) {
					maxn = 1;
					while (maxn < n)
						maxn <<= 1;
					a.assign(2*maxn, v);
					for (int i=maxn-1; i; i--)
						a[i] = f(a[2*i], a[2*i+1]);
				}

				void add(int p, const T& v) {
					p += maxn;
					a[p] = f(a[p], v);
					for (p >>= 1; p; p >>= 1)
						a[p] = f(a[2*p], a[2*p+1]);
				}

				void update(int p, const T& v) {
					p += maxn;
					a[p] = v;
					for (p >>= 1; p; p >>= 1)
						a[p] = f(a[2*p], a[2*p+1]);
				}

				T get(int l, int r, int x, int xl, int xr) const {
					if (r <= xl || xr <= l)
						return e;
					if (l <= xl && xr <= r)
						return a[x];
					int xm = (xl+xr) >> 1;
					return f(get(l, r, 2*x, xl, xm), get(l, r, 2*x+1, xm, xr));
				}

				T operator() (int l, int r) const {
					return get(l, r, 1, 0, maxn);
				}
			};
		"""

	'Segment tree with lazy updates':
		'prefix': 'segtreelazy'
		'body': """
			template<class T, class U, class F, class G, class H>
			struct segtreelazy {
				struct node { T v; U u; };
				int maxn;
				vector<node> a;
				T e; U eu;
				F f; G g; H h;
				// Add two elements
				// Add two updaters
				// Add an element and an update
				// Neutral element
				// Neutral update
				// Bottom level element
				segtreelazy(int n, F f, G g, H h, T e = T(), U eu = U(), T v = T()) :
					e(e), eu(eu), f(f), g(g), h(h)
				{
					maxn = 1;
					while (maxn < n)
						maxn <<= 1;
					a.assign(2*maxn, node{v, eu});
					for (int i=maxn-1; i; i--)
						a[i].v = f(a[2*i].v, a[2*i+1].v);
				}

				void push(int x) {
					a[x].v = h(a[x].v, a[x].u);
					if (x < maxn) {
						a[2*x  ].u = g(a[2*x  ].u, a[x].u);
						a[2*x+1].u = g(a[2*x+1].u, a[x].u);
					}
					a[x].u = eu;
				}

				void update(int l, int r, const U& u, int x, int xl, int xr) {
					if (r <= xl || xr <= l)
						return push(x);
					if (l <= xl && xr <= r)
						return a[x].u = g(a[x].u, u), push(x);
					push(x);
					int xm = (xl+xr) >> 1;
					update(l, r, u, 2*x  , xl, xm);
					update(l, r, u, 2*x+1, xm, xr);
					a[x].v = f(a[2*x].v, a[2*x+1].v);
				}

				T get(int l, int r, int x, int xl, int xr) {
					push(x);
					if (r <= xl || xr <= l)
						return e;
					if (l <= xl && xr <= r)
						return a[x].v;
					int xm = (xl+xr) >> 1;
					return f(get(l, r, 2*x, xl, xm), get(l, r, 2*x+1, xm, xr));
				}

				void update(int l, int r, const U& u) { update(l, r, u, 1, 0, maxn); }
				T operator() (int l, int r) { return get(l, r, 1, 0, maxn); }
			};
		"""

	'Monotonic queue':
		'prefix': 'monotonicqueue'
		'body': """
			template<class T = int, class F = plus<T>>
			struct monotonic_queue {
				struct node { T v, s; };
				vector<node> a, b;
				T e;
				F f;

				monotonic_queue(T e = T(), F f = F()) : e(e), f(f) {}

				void push(vector<node>& a, const T& v) {
					if (a.size())
						a.push_back({v, f(a.back().s, v)});
					else
						a.push_back({v, v});
				}

				void rotate() {
					while (a.size()) {
						push(b, a.back().v);
						a.pop_back();
					}
				}

				monotonic_queue& operator+= (const T& x) {
					push(a, x);
					return *this;
				}

				T operator() () const {
					T x = e;
					if (a.size()) x = f(x, a.back().s);
					if (b.size()) x = f(x, b.back().s);
					return x;
				}

				void pop() {
					if (!b.size())
						rotate();
					b.pop_back();
				}
			};
		"""

	'Sparse table':
		'prefix': 'sparsetable'
		'body': """
			template<class T = int, class F = plus<T>>
			struct sparse_table {
				vector<vector<T>> d;
				T e;
				F f;

				sparse_table(vector<T> a, T e = T(), F f = F()) : e(e), f(f) {
					d.push_back(a);
					int n = a.size();
					for (int h=1; h*2<=n; h<<=1) {
						int m = a.size() - h;
						vector<T> b(m);
						for (int i=0; i<m; i++)
							b[i] = f(a[i], a[i+h]);
						d.push_back(b);
						swap(a, b);
					}
				}

				T operator() (int l, int r) const {
					if (l >= r) return e;
					int i = 31 - __builtin_clz(r-l);
					return f(d[i][l], d[i][r-(1<<i)]);
				}
			};
		"""
